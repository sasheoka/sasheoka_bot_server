# cogs/mass_block_cog.py
import discord
from discord import app_commands
from discord.ext import commands
import logging
import asyncio
import re
from typing import List, Dict, Any, Optional

from utils.snag_api_client import SnagApiClient
from utils.checks import is_admin_in_guild # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤

logger = logging.getLogger(__name__)

EVM_ADDRESS_PATTERN = re.compile(r"^0x[a-fA-F0-9]{40}$")
MAX_FILE_SIZE = 1024 * 100  # 100 KB –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

# --- View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ---
class MassActionConfirmView(discord.ui.View):
    def __init__(self, cog_instance: "MassBlockCog", found_wallets: List[Dict[str, Any]], original_interaction: discord.Interaction):
        super().__init__(timeout=300.0) # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        self.cog = cog_instance
        self.found_wallets = found_wallets # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—à–ª–∏
        self.original_interaction = original_interaction
        self.message: Optional[discord.Message] = None

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        if interaction.user.id != self.original_interaction.user.id:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", ephemeral=True)
            return False
        return True

    async def on_timeout(self):
        if self.message:
            try:
                await self.message.edit(content="–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã.", view=None, embed=None)
            except discord.HTTPException:
                pass # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        self.stop()

    async def _perform_mass_action(self, interaction: discord.Interaction, block_flag: bool):
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        for item in self.children:
            item.disabled = True
        action_name = "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞" if block_flag else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        await interaction.response.edit_message(content=f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è **{action_name}** –¥–ª—è {len(self.found_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤...", view=self, embed=None)

        results = await self.cog.process_mass_update(self.found_wallets, block_flag, interaction.user)
        
        success_count = results['success']
        fail_count = results['failed']
        
        embed = discord.Embed(
            title=f"–û—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {action_name}",
            color=discord.Color.green() if fail_count == 0 else discord.Color.orange()
        )
        embed.description = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(self.found_wallets)}"
        embed.add_field(name="‚úÖ –£—Å–ø–µ—à–Ω–æ", value=str(success_count), inline=True)
        embed.add_field(name="‚ùå –û—à–∏–±–∫–∏", value=str(fail_count), inline=True)

        if results['failed_wallets']:
            failed_list = "\n".join([f"`{addr}`" for addr in results['failed_wallets']])
            embed.add_field(name="–ö–æ—à–µ–ª—å–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏", value=failed_list[:1024], inline=False)
            
        await interaction.edit_original_response(content="–ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", embed=embed, view=None)
        self.stop()


    @discord.ui.button(label="üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", style=discord.ButtonStyle.danger, custom_id="mass_block:block_all")
    async def block_all_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._perform_mass_action(interaction, True)

    @discord.ui.button(label="üü¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", style=discord.ButtonStyle.success, custom_id="mass_block:unblock_all")
    async def unblock_all_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self._perform_mass_action(interaction, False)


# --- –ö–ª–∞—Å—Å –ö–æ–≥–∞ ---
class MassBlockCog(commands.Cog, name="Mass Block Tool"):
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.snag_client: Optional[SnagApiClient] = getattr(bot, 'snag_client', None)
        if not self.snag_client:
            logger.error(f"{self.__class__.__name__}: Main SnagApiClient not found! Functionality will be disabled.")
        logger.info(f"Cog '{self.__class__.__name__}' loaded.")

    def get_block_status_from_userdata(self, user_data: Dict[str, Any]) -> bool:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_metadata_list = user_data.get("userMetadata", [])
        if not user_metadata_list:
            return False
        return user_metadata_list[0].get("isBlocked", False)
        
    async def _get_wallets_from_file(self, file: discord.Attachment) -> List[str]:
        """–ß–∏—Ç–∞–µ—Ç, –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        content = await file.read()
        lines = content.decode('utf-8').splitlines()
        
        valid_wallets = []
        for line in lines:
            address = line.strip().lower()
            if EVM_ADDRESS_PATTERN.match(address):
                valid_wallets.append(address)
        return list(set(valid_wallets)) # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    @app_commands.command(name="mass_block_tool", description="–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ .txt —Ñ–∞–π–ª–∞.")
    @is_admin_in_guild() # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤!
    @app_commands.describe(wallets_file="–§–∞–π–ª .txt —Å EVM –∞–¥—Ä–µ—Å–∞–º–∏, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.")
    async def mass_block_tool(self, interaction: discord.Interaction, wallets_file: discord.Attachment):
        await interaction.response.defer(ephemeral=True, thinking=True)

        # --- 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ ---
        if not wallets_file.filename.lower().endswith('.txt'):
            await interaction.followup.send("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.txt`.", ephemeral=True)
            return
        if wallets_file.size > MAX_FILE_SIZE:
            await interaction.followup.send(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç {MAX_FILE_SIZE / 1024} KB).", ephemeral=True)
            return
        
        wallets = await self._get_wallets_from_file(wallets_file)
        if not wallets:
            await interaction.followup.send("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö EVM –∞–¥—Ä–µ—Å–æ–≤.", ephemeral=True)
            return
            
        logger.info(f"User {interaction.user.name} initiated mass check for {len(wallets)} wallets.")

        # --- 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
        tasks = [self.snag_client.get_user_data(wallet_address=w) for w in wallets]
        responses = await asyncio.gather(*tasks)

        # --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---
        found_wallets: List[Dict[str, Any]] = []
        not_found_wallets: List[str] = []
        api_error_wallets: List[str] = []

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for wallet, response in zip(wallets, responses):
            if response and not response.get("error") and isinstance(response.get("data"), list) and response["data"]:
                found_wallets.append(response["data"][0])
            elif response and response.get("error"):
                api_error_wallets.append(wallet)
            else: # –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                not_found_wallets.append(wallet)
        
        # --- 4. –°–æ–∑–¥–∞–Ω–∏–µ Embed —Å –æ—Ç—á–µ—Ç–æ–º –æ —Å—Ç–∞—Ç—É—Å–∞—Ö ---
        embed = discord.Embed(
            title=f"–û—Ç—á–µ—Ç –ø–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–∞–º",
            description="–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.",
            color=discord.Color.blue()
        )
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏.")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Ç
        blocked = [f"`{w.get('walletAddress')}`" for w in found_wallets if self.get_block_status_from_userdata(w)]
        not_blocked = [f"`{w.get('walletAddress')}`" for w in found_wallets if not self.get_block_status_from_userdata(w)]

        if blocked: embed.add_field(name=f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ({len(blocked)})", value="\n".join(blocked)[:1024], inline=False)
        if not_blocked: embed.add_field(name=f"üü¢ –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ({len(not_blocked)})", value="\n".join(not_blocked)[:1024], inline=False)
        if not_found_wallets: embed.add_field(name=f"‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ ({len(not_found_wallets)})", value="\n".join(f"`{w}`" for w in not_found_wallets)[:1024], inline=False)
        if api_error_wallets: embed.add_field(name=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({len(api_error_wallets)})", value="\n".join(f"`{w}`" for w in api_error_wallets)[:1024], inline=False)
        
        if not found_wallets:
            await interaction.followup.send(embed=embed, ephemeral=True)
            return # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è, –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã

        # --- 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ ---
        view = MassActionConfirmView(self, found_wallets, interaction)
        message = await interaction.followup.send(embed=embed, view=view, ephemeral=True)
        view.message = message

    async def process_mass_update(self, wallets_data: List[Dict[str, Any]], block_flag: bool, user: discord.User) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤."""
        action_text = "blocking" if block_flag else "unblocking"
        logger.info(f"User {user.name} is mass-{action_text} {len(wallets_data)} wallets.")
        
        tasks = []
        for user_data in wallets_data:
            payload = {
                "walletAddress": user_data.get("walletAddress"),
                "organizationId": self.snag_client._organization_id,
                "websiteId": self.snag_client._website_id,
                "isBlocked": block_flag
            }
            tasks.append(self.snag_client.create_user_metadata(payload))

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        
        results = {"success": 0, "failed": 0, "failed_wallets": []}
        for user_data, response in zip(wallets_data, responses):
            wallet_address = user_data.get("walletAddress")
            if isinstance(response, Exception) or (isinstance(response, dict) and response.get("error")):
                results["failed"] += 1
                results["failed_wallets"].append(wallet_address)
                logger.error(f"Failed to mass-update wallet {wallet_address}. Reason: {response}")
            else:
                results["success"] += 1
        
        return results


async def setup(bot: commands.Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–≥–∞
    if not getattr(bot, 'snag_client', None) or not bot.snag_client._api_key:
        logger.critical("CRITICAL: Snag API client or API key is missing. MassBlockCog will NOT be loaded.")
        return
    if not os.getenv('ADMIN_GUILD_ID') or not os.getenv('RANGER_ROLE_ID'):
         logger.critical("CRITICAL: ADMIN_GUILD_ID or RANGER_ROLE_ID not set. MassBlockCog will NOT be loaded as it relies on admin checks.")
         return

    await bot.add_cog(MassBlockCog(bot))